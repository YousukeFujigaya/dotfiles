#!/bin/sh
set -e

# Error handling for install script
handle_install_error() {
    echo "‚ùå ERROR: Installation failed at line $1" >&2
    echo "üìç Please check the error message above and try again" >&2
    exit 1
}

trap 'handle_install_error $LINENO' ERR

GITHUB_USER_NAME=YousukeFujigaya
GHQ_ROOT_PATH=~/Repos

INSTALL_DIR="${INSTALL_DIR:-${GHQ_ROOT_PATH}/github.com/${GITHUB_USER_NAME}/dotfiles}"

###########################################################
# Pre-flight checks
###########################################################
echo "üîç Running pre-flight checks..."

# Check if running on macOS
if [ "$(uname)" != "Darwin" ]; then
    echo "‚ùå ERROR: This script is designed for macOS only" >&2
    exit 1
fi

# Check internet connectivity
if ! ping -c 1 google.com >/dev/null 2>&1; then
    echo "‚ùå ERROR: No internet connection available" >&2
    exit 1
fi

# Check for git and Command Line Tools
if ! command -v git >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  git is not installed. Attempting to install Command Line Tools..."
    
    # Check if Command Line Tools are already installed
    if ! xcode-select -p >/dev/null 2>&1; then
        echo "üì• Installing Xcode Command Line Tools..."
        echo "   This will open a dialog - please click 'Install' and wait for completion."
        echo "   After installation completes, please re-run this script."
        echo ""
        
        # Trigger Command Line Tools installation
        xcode-select --install
        
        echo ""
        echo "‚è≥ Waiting for Command Line Tools installation..."
        echo "   Please complete the installation in the dialog that appeared."
        echo ""
        
        # Wait for installation to complete
        echo "üîÑ Monitoring installation progress..."
        while ! xcode-select -p >/dev/null 2>&1; do
            echo "   Still installing... (checking every 10 seconds)"
            sleep 10
        done
        
        # Additional wait to ensure git is available
        echo "‚úÖ Command Line Tools installation detected!"
        echo "‚è≥ Waiting a moment for tools to be fully available..."
        sleep 5
        
        # Verify git is now available
        if ! command -v git >/dev/null 2>&1; then
            echo "‚ùå ERROR: Installation completed but git is still not available"
            echo "   Please restart your terminal and run the script again"
            exit 1
        fi
        
        echo "‚úÖ git is now available! Continuing with installation..."
    else
        echo "‚ùå ERROR: Command Line Tools are installed but git is missing"
        echo "   Please check your installation or contact support"
        exit 1
    fi
fi

echo "‚úÖ Pre-flight checks passed"

###########################################################
# Clone dotfiles from github.com
###########################################################
if [ ! -d "$INSTALL_DIR" ]; then
    echo "üìå Clone dotfiles..."
    git clone https://github.com/"$GITHUB_USER_NAME"/dotfiles --recursive "$INSTALL_DIR"
else
    echo "üìå Updating dotfiles..."
    git -C "$INSTALL_DIR" pull
    [ -f "$INSTALL_DIR"/.gitmodules ] && git -C "$INSTALL_DIR" submodule update --init --recursive
fi

# ----------------------------------------------------------
# Determine setup mode (interactive or automated)
if [ -n "$BOOTSTRAP_MODE" ]; then
    # Non-interactive mode using environment variable
    setup_choice="$BOOTSTRAP_MODE"
    echo "ü§ñ Non-interactive mode: BOOTSTRAP_MODE=$BOOTSTRAP_MODE"
else
    # Interactive mode
    echo ""
    echo "üéØ Setup Options:"
    echo "  [1] Full setup (recommended for new machines)"
    echo "  [2] Update only (homebrew, packages, and basic maintenance)"  
    echo "  [3] Skip setup (repository update only)"
    echo ""
    echo "üí° Tip: For automation, set BOOTSTRAP_MODE environment variable (1, 2, or 3)"
    echo ""

    # Default to full setup if no input provided
    printf "Choose an option [1]: "
    read -r setup_choice

    # Set default value if empty
    setup_choice=${setup_choice:-1}
fi

case "$setup_choice" in
    1)
        echo "üöÄ Running full setup..."
        /bin/bash "$INSTALL_DIR/scripts/setup"
        ;;
    2)
        echo "üì¶ Running update-only setup..."
        echo "  - Updating Homebrew and packages"
        /bin/bash "$INSTALL_DIR/scripts/setup-homebrew" --update
        echo "  - Updating development tools" 
        /bin/bash "$INSTALL_DIR/scripts/setup-mise"
        echo "  - Re-linking dotfiles"
        /bin/bash "$INSTALL_DIR/scripts/setup-links"
        echo "‚úÖ Update completed!"
        ;;
    3)
        echo "‚è≠Ô∏è  Setup skipped. Repository has been updated."
        ;;
    *)
        echo "‚ùå Invalid option. Running full setup as default..."
        /bin/bash "$INSTALL_DIR/scripts/setup"
        ;;
esac
